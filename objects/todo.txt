
TODO.txt


************
** Inventory
**
**  We need to work on the drag & drop movable html elements thing:
        https://www.w3schools.com/howto/howto_js_draggable.asp
        https://www.w3schools.com/html/html5_draganddrop.asp
    Then we  need to get the inv items to snap to the hole
    Also to snap back to inv bar if left loose
    shift up subsequent inventory items after 
    If you leave a scene what happens with the inv items - probably go back to inventory
    program in requirements for buttons.
    How are we gonna model it? Pass in constraint functions
    Means the pillar needs updating its state as soon as a var is passed in
    Think we want a "slot" component which manages what variable types it accepts, plus the state of whether its holding a variable or no.


**Separate Specific from Generic behaviour in Pillars/Buttons/scenes
*   Object Scene
*   The others

**Superclass Pillars as they are sharing similar code atm

**Create design for Pillars
*   1 armed bandit / vending machine crossover


**Change drag and drop behaviour to stop manually manipulating dom, to using callbacks and props to move items from inv to pillar
** Change dropSlot to dropArea with multiple slots. Make the slots components
** style the different shapes for diferent variable types


**Create design for invetory
*    Location - inside viewport or no?
*   Always open? or not

**Get a navigations scene drawing with a child scene that comes in from props

**Do css modularised by scene number

**Folder Structure per component?
* src/components/Scene1/Scene1Pillar? think about it

** Fix click animation for method buttons.

* Class not getting set correctly on scene1
* where is RNG SCene its not getting rendered




Ok so we need to do some structuring

Css - shrinking stuff that's not in an active scene
Maybe its best to pass in a class that's applied to all elements
Or we can transform: scale the scene but I worry if this will affect everything within the scene. Need to test this with position: absolute stuff too.

Or we use some sort of decorator that modifies the state to manipulate the styles? Seems awfully involved.

Or we could write something that for every selector with width and height recalcs the mini dimensions and creates a corresponding .mini class/selector




we need to sort out splitting up NavScene and NavScene1






later on
we need to think about game state how do we store its
lower level we need scene game state. 

Scene 1 when is it complete? You can still use the methods
Complete is not the word/var name. Should be "created" or exists or instantiated.

Can other things cause method pillars to appear over time?
are we going to want to re-run constructors ever?
Each scene could have like 8 constr pillar slots and 8 method pillar slots and we use a bitmap basically which gets passed in
Who's responsibility is it to keep track of the state of the scene. Itself presumably? Or the parent? I think maybe the parent
So 



also need to think about image management tbh


are those header/attribute things in c# just decorators?